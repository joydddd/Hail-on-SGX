enclave {
    from "openenclave/edl/syscall.edl" import *;
    from "platform.edl" import *;
    from "openenclave/edl/logging.edl" import *;
    include "server_type.h"
    include "buffer_size.h"

    trusted {
        public void setup_enclave(const int num_threads);

        public void log_regression(const int thread_id);
        // public void linear_regression_beta();
        // public void linear_regression_t_stat();
    };

    untrusted {
        void start_timer([in] const char func_name[ENCLAVE_READ_BUFFER_SIZE]);

        void stop_timer([in] const char func_name[ENCLAVE_READ_BUFFER_SIZE]);

        void setrsapubkey([in] uint8_t enc_rsa_pub_key[RSA_PUB_KEY_SIZE]);

        /* get enclave setup data */
        // return number of clients
        int getclientnum();

        // get covariantnumber from host
        // sepcially, when the covariant is indent 1, covariant name must be "1"
        /* e.g. For model y =  1/(1 + e^(b0x + b1 + b2c1)), 
        there are two covariants and their names are "Cov1" & "1" */
        void getcovlist([out] char covlist[ENCLAVE_READ_BUFFER_SIZE]);
        
        // copy aes key and iv from host machine to enclave;
        bool getaes(
            const int client_num,
            const int thread_id, 
            [out] unsigned char key[256],
            [out] unsigned char iv[256]);

        // copy y from host machine to enclave;
        int gety(
            const int client_num,
            [out] char y[ENCLAVE_READ_BUFFER_SIZE]);


        // copy no. covariant from host to enclave
        // cov == "1" if the covariant is indent 1
        int getcov(
            const int client_num, 
            [in] const char cov_name[MAX_CLIENTNAME_LENGTH], 
            [out] char cov[ENCLAVE_READ_BUFFER_SIZE]);

        int get_encrypted_x_size(const int client_num);

        /* input data requests*/
        // get batch from outside of enclave
        // return const char* EOFSeperator if reaches end of dataset
        // *rt = number of lines in batch
        int getbatch(  
            [out] char batch[ENCLAVE_READ_BUFFER_SIZE],
            const int thread_id);

        /* output data requests */
        // copy encrypted batch to host machine
        void writebatch(
            enum Row_T type, 
            [in] char buffer[ENCLAVE_OUTPUT_BUFFER_SIZE],
            const int thread_id);
    };
};
